(FLOAT_LITERAL ==> 25.75)
(ID ==> obj)
(DOT ==> .)
(ID ==> obj)
(ID ==> obj)
(DOT ==> .)
(INTEGRAL_LITERAL ==> 5)
(ASSIGN_OPERATOR ==> =)
(ASSIGN_OPERATOR ==> =)
(LESSTHAN ==> >)
(ID ==> split)
(ID ==> obj)
(DOT ==> .)
(ASSIGN_OPERATOR ==> =)
(ASSIGN_OPERATOR ==> =)
(LESSTHAN ==> >)
(ID ==> split)
(DOT ==> .)
(ID ==> obj)
(ASSIGN_OPERATOR ==> =)
(ASSIGN_OPERATOR ==> =)
(LESSTHAN ==> >)
(ID ==> split)
(INTEGRAL_LITERAL ==> 2)
(DOT ==> .)
(ID ==> obj)
(ASSIGN_OPERATOR ==> =)
(ASSIGN_OPERATOR ==> =)
(LESSTHAN ==> >)
(ID ==> split)
(FLOAT_LITERAL ==> 3.)
(FLOAT_LITERAL ==> 6.5)
(DOT ==> .3)
(VOID ==> void)
(ID ==> autoStorageClass)
(RIGHT_ROUND_B ==> ()
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "\nDemonstrating auto class\n\n")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(AUTO ==> auto)
(INT ==> int)
(ID ==> a)
(ASSIGN_OPERATOR ==> =)
(INTEGRAL_LITERAL ==> 32)
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "Value of the variable 'a")
(COMMA ==> ,)
(syntax error with word ==> " declared as auto: %d\n")
(COMMA ==> ,)
(ID ==> a)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "--------------------------------")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
(VOID ==> void)
(ID ==> registerStorageClass)
(RIGHT_ROUND_B ==> ()
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "\nDemonstrating register class\n\n")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(REGISTER ==> register)
(CHAR ==> char)
(ID ==> b)
(ASSIGN_OPERATOR ==> =)
(CHAR_LITERAL ==> 'G')
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "Value of the variable ")
(COMMA ==> ,)
(syntax error with word ==> " declared as register: %d\n")
(COMMA ==> ,)
(ID ==> b)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "--------------------------------")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
(VOID ==> void)
(ID ==> externStorageClass)
(RIGHT_ROUND_B ==> ()
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "\nDemonstrating extern class\n\n")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(EXTERN ==> extern)
(INT ==> int)
(ID ==> x)
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "Value of the variable 'x'")
(syntax error with word ==> " declared as extern: %d\n")
(COMMA ==> ,)
(ID ==> x)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> x)
(ASSIGN_OPERATOR ==> =)
(INTEGRAL_LITERAL ==> 2)
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "Modified value of the variable 'x'")
(syntax error with word ==> " declared as extern: %d\n")
(COMMA ==> ,)
(ID ==> x)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "--------------------------------")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
(VOID ==> void)
(ID ==> staticStorageClass)
(RIGHT_ROUND_B ==> ()
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(INT ==> int)
(ID ==> i)
(ASSIGN_OPERATOR ==> =)
(EOF ==> 0)
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "\nDemonstrating static class\n\n")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "Declaring 'y' as static inside the loop.\n")
(syntax error with word ==> "But this declaration will occur only")
(syntax error with word ==> " once as 'y' is static.\n")
(syntax error with word ==> "If not, then every time the value of 'y' ")
(syntax error with word ==> "will be the declared value 5")
(syntax error with word ==> " as in the case of variable 'p'\n")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "\nLoop started:\n")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(FOR ==> for)
(RIGHT_ROUND_B ==> ()
(ID ==> i)
(ASSIGN_OPERATOR ==> =)
(INTEGRAL_LITERAL ==> 1)
(SEMICOLON ==> ;)
(ID ==> i)
(GREATERTHAN ==> <)
(INTEGRAL_LITERAL ==> 5)
(SEMICOLON ==> ;)
(ID ==> i)
(PLUS ==> +)
(PLUS ==> +)
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(STATIC ==> static)
(INT ==> int)
(ID ==> y)
(ASSIGN_OPERATOR ==> =)
(INTEGRAL_LITERAL ==> 5)
(SEMICOLON ==> ;)
(INT ==> int)
(ID ==> p)
(ASSIGN_OPERATOR ==> =)
(INTEGRAL_LITERAL ==> 10)
(SEMICOLON ==> ;)
(ID ==> y)
(PLUS ==> +)
(PLUS ==> +)
(SEMICOLON ==> ;)
(ID ==> p)
(PLUS ==> +)
(PLUS ==> +)
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "\nThe value of 'y', ")
(syntax error with word ==> "declared as static, in %d ")
(syntax error with word ==> "iteration is %d\n")
(COMMA ==> ,)
(ID ==> i)
(COMMA ==> ,)
(ID ==> y)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "The value of non-static variable 'p', ")
(syntax error with word ==> "in %d iteration is %d\n")
(COMMA ==> ,)
(ID ==> i)
(COMMA ==> ,)
(ID ==> p)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "\nLoop ended:\n")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "--------------------------------")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
(INT ==> int)
(ID ==> main)
(RIGHT_ROUND_B ==> ()
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(INT ==> int)
(ID ==> num1)
(COMMA ==> ,)
(ID ==> num2)
(COMMA ==> ,)
(ID ==> flag_var)
(COMMA ==> ,)
(ID ==> i)
(COMMA ==> ,)
(ID ==> j)
(SEMICOLON ==> ;)
(INT ==> int)
(ID ==> num)
(COMMA ==> ,)
(ID ==> copy_of_num)
(COMMA ==> ,)
(ID ==> sum)
(ASSIGN_OPERATOR ==> =)
(EOF ==> 0)
(COMMA ==> ,)
(ID ==> rem)
(SEMICOLON ==> ;)
(INT ==> int)
(ID ==> reverse_num)
(ASSIGN_OPERATOR ==> =)
(EOF ==> 0)
(COMMA ==> ,)
(ID ==> remainder)
(COMMA ==> ,)
(ID ==> temp)
(SEMICOLON ==> ;)
(CHAR ==> char)
(ID ==> ch)
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "Enter two range(input integer numbers only):")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> scanf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "%d %d")
(COMMA ==> ,)
(syntax error with word ==> &num1)
(COMMA ==> ,)
(syntax error with word ==> &num2)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "Prime numbers from %d and %d are:\n")
(COMMA ==> ,)
(ID ==> num1)
(COMMA ==> ,)
(ID ==> num2)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(FOR ==> for)
(RIGHT_ROUND_B ==> ()
(ID ==> i)
(ASSIGN_OPERATOR ==> =)
(ID ==> num1)
(PLUS ==> +)
(INTEGRAL_LITERAL ==> 1)
(SEMICOLON ==> ;)
(ID ==> i)
(GREATERTHAN ==> <)
(ID ==> num2)
(SEMICOLON ==> ;)
(PLUS ==> +)
(PLUS ==> +)
(ID ==> i)
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(ID ==> flag_var)
(ASSIGN_OPERATOR ==> =)
(EOF ==> 0)
(SEMICOLON ==> ;)
(FOR ==> for)
(RIGHT_ROUND_B ==> ()
(ID ==> j)
(ASSIGN_OPERATOR ==> =)
(INTEGRAL_LITERAL ==> 2)
(SEMICOLON ==> ;)
(ID ==> j)
(GREATERTHAN ==> <)
(ASSIGN_OPERATOR ==> =)
(ID ==> i)
(DIVIDE ==> /)
(INTEGRAL_LITERAL ==> 2)
(SEMICOLON ==> ;)
(PLUS ==> +)
(PLUS ==> +)
(ID ==> j)
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(IF ==> if)
(RIGHT_ROUND_B ==> ()
(ID ==> i%j)
(LESSTHAN ==> >)
(ASSIGN_OPERATOR ==> =)
(EOF ==> 0)
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(ID ==> flag_var)
(ASSIGN_OPERATOR ==> =)
(INTEGRAL_LITERAL ==> 1)
(SEMICOLON ==> ;)
(BREAK ==> break)
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
(LEFT_CURLY_B ==> })
(IF ==> if)
(RIGHT_ROUND_B ==> ()
(ID ==> flag_var)
(ASSIGN_OPERATOR ==> =)
(ASSIGN_OPERATOR ==> =)
(EOF ==> 0)
(LEFT_ROUND_B ==> ))
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "%d\n")
(COMMA ==> ,)
(ID ==> i)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "\nEnter a number:")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> scanf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "%d")
(COMMA ==> ,)
(syntax error with word ==> &num)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> copy_of_num)
(ASSIGN_OPERATOR ==> =)
(ID ==> num)
(SEMICOLON ==> ;)
(WHILE ==> while)
(RIGHT_ROUND_B ==> ()
(ID ==> num)
(NOT ==> !)
(ASSIGN_OPERATOR ==> =)
(EOF ==> 0)
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(ID ==> rem)
(ASSIGN_OPERATOR ==> =)
(ID ==> num)
(MOD ==> %)
(INTEGRAL_LITERAL ==> 10)
(SEMICOLON ==> ;)
(ID ==> sum)
(ASSIGN_OPERATOR ==> =)
(ID ==> sum)
(PLUS ==> +)
(RIGHT_ROUND_B ==> ()
(ID ==> rem)
(ASTERICK ==> *)
(ID ==> rem)
(ASTERICK ==> *)
(ID ==> rem)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> num)
(ASSIGN_OPERATOR ==> =)
(ID ==> num)
(DIVIDE ==> /)
(INTEGRAL_LITERAL ==> 10)
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
(IF ==> if)
(RIGHT_ROUND_B ==> ()
(ID ==> copy_of_num)
(ASSIGN_OPERATOR ==> =)
(ASSIGN_OPERATOR ==> =)
(ID ==> sum)
(LEFT_ROUND_B ==> ))
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "\n%d is an Armstrong Number")
(COMMA ==> ,)
(ID ==> copy_of_num)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ELSE ==> else)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "\n%d is not an Armstrong Number")
(COMMA ==> ,)
(ID ==> copy_of_num)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "Enter an integer: ")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> scanf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "%d")
(COMMA ==> ,)
(syntax error with word ==> &num)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> temp)
(ASSIGN_OPERATOR ==> =)
(ID ==> num)
(SEMICOLON ==> ;)
(WHILE ==> while)
(RIGHT_ROUND_B ==> ()
(ID ==> temp!)
(ASSIGN_OPERATOR ==> =)
(EOF ==> 0)
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(ID ==> remainder)
(ASSIGN_OPERATOR ==> =)
(ID ==> temp%10)
(SEMICOLON ==> ;)
(ID ==> reverse_num)
(ASSIGN_OPERATOR ==> =)
(ID ==> reverse_num)
(ASTERICK ==> *)
(INTEGRAL_LITERAL ==> 10)
(PLUS ==> +)
(ID ==> remainder)
(SEMICOLON ==> ;)
(ID ==> temp)
(DIVIDE ==> /)
(ASSIGN_OPERATOR ==> =)
(INTEGRAL_LITERAL ==> 10)
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
(IF ==> if)
(RIGHT_ROUND_B ==> ()
(ID ==> reverse_num)
(ASSIGN_OPERATOR ==> =)
(ASSIGN_OPERATOR ==> =)
(ID ==> num)
(LEFT_ROUND_B ==> ))
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "%d is a palindrome number")
(COMMA ==> ,)
(ID ==> num)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ELSE ==> else)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "%d is not a palindrome number")
(COMMA ==> ,)
(ID ==> num)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> a)
(ASTERICK ==> *)
(ID ==> b)
(INTEGRAL_LITERAL ==> 5)
(ASTERICK ==> *)
(INTEGRAL_LITERAL ==> 6)
(LONG ==> long)
(LONG ==> long)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "Enter any character:")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> scanf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "%c")
(COMMA ==> ,)
(syntax error with word ==> &ch)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "ASCII value of character %c is: %d")
(COMMA ==> ,)
(ID ==> ch)
(COMMA ==> ,)
(ID ==> ch)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "A program to demonstrate")
(syntax error with word ==> " Storage Classes in C\n\n")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> autoStorageClass)
(RIGHT_ROUND_B ==> ()
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> registerStorageClass)
(RIGHT_ROUND_B ==> ()
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> externStorageClass)
(RIGHT_ROUND_B ==> ()
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> staticStorageClass)
(RIGHT_ROUND_B ==> ()
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "\n\nStorage Classes demonstrated")
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(INT ==> int)
(ASTERICK ==> *)
(ID ==> p)
(ASSIGN_OPERATOR ==> =)
(ID ==> NULL)
(SEMICOLON ==> ;)
(ID ==> p)
(ASSIGN_OPERATOR ==> =)
(NEW ==> new)
(RIGHT_ROUND_B ==> ()
(ID ==> nothrow)
(LEFT_ROUND_B ==> ))
(INT ==> int)
(SEMICOLON ==> ;)
(IF ==> if)
(RIGHT_ROUND_B ==> ()
(NOT ==> !p)
(LEFT_ROUND_B ==> ))
(ID ==> cout)
(GREATERTHAN ==> <)
(GREATERTHAN ==> <)
(syntax error with word ==> "allocation of memory failed\n")
(SEMICOLON ==> ;)
(ELSE ==> else)
(RIGHT_CURLY_B ==> {)
(ASTERICK ==> *)
(ID ==> p)
(ASSIGN_OPERATOR ==> =)
(INTEGRAL_LITERAL ==> 29)
(SEMICOLON ==> ;)
(ID ==> cout)
(GREATERTHAN ==> <)
(GREATERTHAN ==> <)
(syntax error with word ==> "Value of p: ")
(GREATERTHAN ==> <)
(GREATERTHAN ==> <)
(ASTERICK ==> *)
(ID ==> p)
(GREATERTHAN ==> <)
(GREATERTHAN ==> <)
(ID ==> endl)
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
(FLOAT ==> float)
(ASTERICK ==> *)
(ID ==> r)
(ASSIGN_OPERATOR ==> =)
(NEW ==> new)
(FLOAT ==> float)
(RIGHT_ROUND_B ==> ()
(FLOAT_LITERAL ==> 75.25)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> cout)
(GREATERTHAN ==> <)
(GREATERTHAN ==> <)
(syntax error with word ==> "Value of r: ")
(GREATERTHAN ==> <)
(GREATERTHAN ==> <)
(ASTERICK ==> *)
(ID ==> r)
(GREATERTHAN ==> <)
(GREATERTHAN ==> <)
(ID ==> endl)
(SEMICOLON ==> ;)
(INT ==> int)
(ID ==> n)
(ASSIGN_OPERATOR ==> =)
(INTEGRAL_LITERAL ==> 5)
(SEMICOLON ==> ;)
(INT ==> int)
(ASTERICK ==> *)
(ID ==> q)
(ASSIGN_OPERATOR ==> =)
(NEW ==> new)
(RIGHT_ROUND_B ==> ()
(ID ==> nothrow)
(LEFT_ROUND_B ==> ))
(INT ==> int)
(RIGHT_SQUARE_B ==> [)
(ID ==> n)
(LEFT_SQUARE_B ==> ])
(SEMICOLON ==> ;)
(IF ==> if)
(RIGHT_ROUND_B ==> ()
(NOT ==> !q)
(LEFT_ROUND_B ==> ))
(ID ==> cout)
(GREATERTHAN ==> <)
(GREATERTHAN ==> <)
(syntax error with word ==> "allocation of memory failed\n")
(SEMICOLON ==> ;)
(ELSE ==> else)
(RIGHT_CURLY_B ==> {)
(FOR ==> for)
(RIGHT_ROUND_B ==> ()
(INT ==> int)
(ID ==> i)
(ASSIGN_OPERATOR ==> =)
(EOF ==> 0)
(SEMICOLON ==> ;)
(ID ==> i)
(GREATERTHAN ==> <)
(ID ==> n)
(SEMICOLON ==> ;)
(ID ==> i)
(PLUS ==> +)
(PLUS ==> +)
(LEFT_ROUND_B ==> ))
(ID ==> q)
(RIGHT_SQUARE_B ==> [)
(ID ==> i)
(LEFT_SQUARE_B ==> ])
(ASSIGN_OPERATOR ==> =)
(ID ==> i)
(PLUS ==> +)
(INTEGRAL_LITERAL ==> 1)
(SEMICOLON ==> ;)
(ID ==> a)
(ASTERICK ==> *)
(ID ==> b)
(ID ==> i)
(PLUS ==> +)
(ASSIGN_OPERATOR ==> =)
(PLUS ==> +)
(PLUS ==> +)
(ID ==> i)
(ID ==> i)
(PLUS ==> +)
(PLUS ==> +)
(ID ==> i)
(MINUS ==> -)
(ASSIGN_OPERATOR ==> =)
(MINUS ==> -)
(MINUS ==> -)
(ID ==> i)
(ID ==> i)
(MINUS ==> -)
(MINUS ==> -)
(ID ==> i)
(MINUS ==> -)
(ID ==> a)
(INTEGRAL_LITERAL ==> 5)
(MINUS ==> -)
(INTEGRAL_LITERAL ==> 4)
(ID ==> i)
(MINUS ==> -)
(syntax error with word ==> \)
(ID ==> cout)
(GREATERTHAN ==> <)
(GREATERTHAN ==> <)
(syntax error with word ==> "Value store in block of memory: ")
(SEMICOLON ==> ;)
(FOR ==> for)
(RIGHT_ROUND_B ==> ()
(INT ==> int)
(ID ==> i)
(ASSIGN_OPERATOR ==> =)
(EOF ==> 0)
(SEMICOLON ==> ;)
(ID ==> i)
(GREATERTHAN ==> <)
(ID ==> n)
(SEMICOLON ==> ;)
(ID ==> i)
(PLUS ==> +)
(PLUS ==> +)
(LEFT_ROUND_B ==> ))
(ID ==> cout)
(GREATERTHAN ==> <)
(GREATERTHAN ==> <)
(ID ==> q)
(RIGHT_SQUARE_B ==> [)
(ID ==> i)
(LEFT_SQUARE_B ==> ])
(GREATERTHAN ==> <)
(GREATERTHAN ==> <)
(syntax error with word ==> " ")
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
(ID ==> delete)
(ID ==> p)
(SEMICOLON ==> ;)
(ID ==> delete)
(ID ==> r)
(SEMICOLON ==> ;)
(ID ==> delete)
(RIGHT_SQUARE_B ==> [)
(LEFT_SQUARE_B ==> ])
(ID ==> q)
(SEMICOLON ==> ;)
(RETURN ==> return)
(EOF ==> 0)
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
(PREPROCESSOR ==> #include)
(GREATERTHAN ==> <)
(ID ==> stdio)
(DOT ==> .)
(ID ==> h)
(LESSTHAN ==> >)
(INT ==> int)
(ID ==> main)
(RIGHT_ROUND_B ==> ()
(VOID ==> void)
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(SHORT ==> short)
(ID ==> s)
(SEMICOLON ==> ;)
(UNSIGNED ==> unsigned)
(INT ==> int)
(ID ==> uiData)
(ASSIGN_OPERATOR ==> =)
(INTEGRAL_LITERAL ==> 19891992)
(SEMICOLON ==> ;)
(SIGNED ==> signed)
(INT ==> int)
(ID ==> iData)
(ASSIGN_OPERATOR ==> =)
(RIGHT_ROUND_B ==> ()
(SIGNED ==> signed)
(INT ==> int)
(LEFT_ROUND_B ==> ))
(ID ==> uiData)
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "%d\n")
(COMMA ==> ,)
(ID ==> iData)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(RETURN ==> return)
(EOF ==> 0)
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
(PREPROCESSOR ==> #include)
(GREATERTHAN ==> <)
(ID ==> stdio)
(DOT ==> .)
(ID ==> h)
(LESSTHAN ==> >)
(INT ==> int)
(ID ==> main)
(RIGHT_ROUND_B ==> ()
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(INT ==> int)
(ID ==> sum)
(ASSIGN_OPERATOR ==> =)
(EOF ==> 0)
(SEMICOLON ==> ;)
(FOR ==> for)
(RIGHT_ROUND_B ==> ()
(INT ==> int)
(ID ==> i)
(ASSIGN_OPERATOR ==> =)
(EOF ==> 0)
(SEMICOLON ==> ;)
(ID ==> i)
(GREATERTHAN ==> <)
(ASSIGN_OPERATOR ==> =)
(INTEGRAL_LITERAL ==> 10)
(SEMICOLON ==> ;)
(ID ==> i)
(PLUS ==> +)
(PLUS ==> +)
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(ID ==> sum)
(ASSIGN_OPERATOR ==> =)
(ID ==> sum)
(PLUS ==> +)
(ID ==> i)
(SEMICOLON ==> ;)
(IF ==> if)
(RIGHT_ROUND_B ==> ()
(ID ==> i)
(ASSIGN_OPERATOR ==> =)
(ASSIGN_OPERATOR ==> =)
(INTEGRAL_LITERAL ==> 5)
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(GOTO ==> goto)
(ID ==> addition)
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
(LEFT_CURLY_B ==> })
(ID ==> addition:)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "%d")
(COMMA ==> ,)
(ID ==> sum)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(RETURN ==> return)
(EOF ==> 0)
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
(INT ==> int)
(ID ==> main)
(RIGHT_ROUND_B ==> ()
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(REGISTER ==> register)
(INT ==> int)
(ID ==> i)
(ASSIGN_OPERATOR ==> =)
(INTEGRAL_LITERAL ==> 10)
(SEMICOLON ==> ;)
(INT ==> int)
(ASTERICK ==> *)
(ID ==> a)
(ASSIGN_OPERATOR ==> =)
(syntax error with word ==> &i)
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "%d")
(COMMA ==> ,)
(ASTERICK ==> *)
(ID ==> a)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> getchar)
(RIGHT_ROUND_B ==> ()
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(RETURN ==> return)
(EOF ==> 0)
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
(INT ==> int)
(ID ==> main)
(RIGHT_ROUND_B ==> ()
(LEFT_ROUND_B ==> ))
(RIGHT_CURLY_B ==> {)
(INT ==> int)
(ID ==> i)
(ASSIGN_OPERATOR ==> =)
(INTEGRAL_LITERAL ==> 10)
(SEMICOLON ==> ;)
(REGISTER ==> register)
(INT ==> int)
(ASTERICK ==> *)
(ID ==> a)
(ASSIGN_OPERATOR ==> =)
(syntax error with word ==> &i)
(SEMICOLON ==> ;)
(ID ==> printf)
(RIGHT_ROUND_B ==> ()
(syntax error with word ==> "%d")
(COMMA ==> ,)
(ASTERICK ==> *)
(ID ==> a)
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(ID ==> getchar)
(RIGHT_ROUND_B ==> ()
(LEFT_ROUND_B ==> ))
(SEMICOLON ==> ;)
(RETURN ==> return)
(EOF ==> 0)
(SEMICOLON ==> ;)
(LEFT_CURLY_B ==> })
